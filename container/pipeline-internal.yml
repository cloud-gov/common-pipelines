jobs:
  - name: code-scan
    plan:
      - get: pull-request
        version: every
        trigger: true
      - task: scan
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: general-task
              aws_region: us-gov-west-1
              tag: latest
          run:
            path: sh
            args:
              - "-c"
              - "set -e; trivy repo --scanners vuln,misconfig,secret https://github.com/((src-repo))"

  - name: pull-request
    plan:
      - in_parallel:
          - get: pull-request
            version: every
            trigger: true
            passed: [code-scan]

          - get: base-image
            trigger: true
            params:
              format: oci

          - get: common-pipelines
            trigger: ((common-pipelines-trigger))

          - get: common-dockerfiles
            trigger: ((dockerfile-trigger))

      - put: pull-request
        params:
          path: pull-request
          status: pending

      - task: static-analysis
        input_mapping:
          src: pull-request
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: general-task
              aws_region: us-gov-west-1
              tag: latest
          inputs:
            - name: src
          run:
            path: ((static-analysis-cmd))
            args: ((static-analysis-args))

      - task: oci-build
        privileged: true
        file: common-pipelines/container/oci-build.yml
        input_mapping:
          src: pull-request
        params: ((oci-build-params)) # for available params, see https://github.com/concourse/oci-build-task#params

      - task: build-test
        input_mapping:
          src: pull-request
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: oci-build-task
              aws_region: us-gov-west-1
              tag: latest
          inputs:
            - name: src
            - name: base-image
            - name: common-pipelines
            - name: common-dockerfiles
          params: ((build-test-params))
          run:
            path: ((build-test-cmd))
            args: ((build-test-args))

      - in_parallel:
          - task: clamav-scan
            file: common-pipelines/container/clamav-scan.yml
            image: image

          - task: usg-audit
            privileged: true
            file: common-pipelines/container/usg-audit.yml
            image: image
            params:
              IMAGENAME: ((image-repository))
              TAILORINGFILE: ((tailoring-file))

          - task: scan-image
            file: common-pipelines/container/scan-image.yml

      - in_parallel:
          - task: cve-check
            file: common-pipelines/container/cve-check.yml

          - task: software-inventory
            file: common-pipelines/container/software-inventory.yml
            image: image

    on_failure:
      put: pull-request
      params:
        path: pull-request
        status: failure

    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success

  - name: main
    serial_groups: [container-scans]
    plan:
      - in_parallel:
          - get: src
            trigger: ((src-trigger))

          - get: base-image
            trigger: true
            params:
              format: oci

          - get: common-pipelines
            # trigger: ((common-pipelines-trigger))

          - get: common-dockerfiles
            # trigger: ((dockerfile-trigger))

      - task: oci-build
        privileged: true
        file: common-pipelines/container/oci-build.yml
        params: ((oci-build-params)) # for available params, see https://github.com/concourse/oci-build-task#params

      - task: build-test
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: oci-build-task
              aws_region: us-gov-west-1
              tag: latest
          inputs:
            - name: src
            - name: base-image
            - name: common-pipelines
            - name: common-dockerfiles
          params: ((build-test-params))
          run:
            path: ((build-test-cmd))
            args: ((build-test-args))

      - in_parallel:
          - task: clamav-scan
            file: common-pipelines/container/clamav-scan.yml
            image: image

          - task: usg-audit
            file: common-pipelines/container/usg-audit.yml
            image: image
            params:
              IMAGENAME: ((image-repository))
              TAILORINGFILE: ((tailoring-file))

          - task: scan-image
            file: common-pipelines/container/scan-image.yml

      - task: cve-check
        file: common-pipelines/container/cve-check.yml

      - in_parallel:
          - task: import-scan
            file: common-pipelines/container/import-scan.yml
            params:
              IMAGENAME: ((image-repository))

          - task: software-inventory
            file: common-pipelines/container/software-inventory.yml
            image: image

          - put: audit-xml-file
            no_get: true
            params:
              file: audit/((image-repository))-audit.xml

          - put: audit-html-file
            no_get: true
            params:
              file: audit/((image-repository))-audit.html

          - put: image
            inputs:
              - image
              - src
            no_get: true
            params:
              image: image/image.tar
              additional_tags: src/.git/short_ref

    on_failure:
      put: slack
      params: &slack-failure-params
        text: |
          :x: Pipeline `$BUILD_PIPELINE_NAME` FAILED to upload image to ECR
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: ((slack-channel-notifications))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: continuous-scan
    serial_groups: [container-scans]
    plan:
      - in_parallel:
          - get: image
            trigger: false
            params:
              format: oci

          - get: common-pipelines
            trigger: false

          - get: daily
            trigger: true

      - task: scan-image
        file: common-pipelines/container/scan-image.yml

      - in_parallel:
          - task: cve-check
            file: common-pipelines/container/cve-check.yml

          - task: import-scan
            file: common-pipelines/container/import-scan.yml
            params:
              IMAGENAME: ((image-repository))

    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Continuous Scan of `$BUILD_PIPELINE_NAME` FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: conmon-scan
    serial_groups: [container-scans]
    plan:
      - in_parallel:
          - get: image
            trigger: false
            params:
              format: oci

          - get: common-pipelines
            trigger: false

          - get: monthly
            trigger: true

          - get: conmon-scan-file

      - task: conmon-scan
        file: common-pipelines/container/conmon-scan.yml
        params:
          IMAGENAME: ((image-repository))

      - put: conmon-scan-file
        params:
          file: conmon-scan/((image-repository)).xml

    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: ConMon Scan of `$BUILD_PIPELINE_NAME` FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: test-stig-build
    plan:
      - in_parallel:
          - get: src

          - get: stig-base-image
            params:
              format: oci

          - get: common-pipelines
            trigger: ((common-pipelines-trigger))

          - get: common-dockerfiles
            trigger: ((dockerfile-trigger))

      - task: oci-build
        input_mapping:
          base-image: stig-base-image
        privileged: true
        file: common-pipelines/container/oci-build.yml
        params: ((oci-build-params)) # for available params, see https://github.com/concourse/oci-build-task#params

      - task: build-test
        input_mapping:
          base-image: stig-base-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              aws_access_key_id: ((ecr_aws_key))
              aws_secret_access_key: ((ecr_aws_secret))
              repository: oci-build-task
              aws_region: us-gov-west-1
              tag: latest
          inputs:
            - name: src
            - name: base-image
            - name: common-pipelines
            - name: common-dockerfiles
          params: ((build-test-params))
          run:
            path: ((build-test-cmd))
            args: ((build-test-args))

      - in_parallel:
          - task: clamav-scan
            file: common-pipelines/container/clamav-scan.yml
            image: image

          - task: usg-audit
            file: common-pipelines/container/usg-audit.yml
            image: image
            params:
              IMAGENAME: ((image-repository))-stig
              TAILORINGFILE: common-pipelines/container/tailor-stig.xml

resources:
  - name: base-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: ((base-image))
      tag: ((base-image-tag))
      aws_region: us-gov-west-1

  - name: stig-base-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: ((stig-base-image))
      tag: ((stig-base-image-tag))
      aws_region: us-gov-west-1

  - name: common-pipelines
    type: git
    source:
      uri: https://github.com/cloud-gov/common-pipelines
      branch: main
      commit_verification_keys: ((cloud-gov-pgp-keys))
      paths: ["container/*"]
      ignore_paths: ["container/dockerfiles/*"]

  - name: common-dockerfiles
    type: git
    source:
      uri: https://github.com/cloud-gov/common-pipelines
      branch: main
      commit_verification_keys: ((cloud-gov-pgp-keys))
      paths: ((dockerfile-path))

  - name: image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: ((image-repository))
      tag: latest
      aws_region: us-gov-west-1

  - name: pull-request
    type: pull-request
    check_every: 1m
    source:
      repository: ((src-repo))
      access_token: ((cg-ci-bot-ghtoken))
      disable_forks: true
      base_branch: main

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: src
    type: git
    source:
      uri: ((src-repo-uri))
      branch: ((src-branch))
      commit_verification_keys: ((cloud-gov-pgp-keys))
      git_config:
        - name: user.name
          value: cg-ci-bot
        - name: user.email
          value: no-reply@cloud.gov

      private_key: ((cg-ci-bot-sshkey.private_key))
      username: cg-ci-bot

  - name: daily
    type: cron-resource
    source:
      expression: ((daily-scan-time))
      location: "America/New_York"

  - name: monthly
    type: cron-resource
    source:
      expression: "0 6 22 * *"
      location: "America/New_York"

  - name: conmon-scan-file
    type: s3-iam
    source:
      bucket: ((container_scans_bucket))
      versioned_file: conmon-scan/((image-repository)).xml
      region_name: us-gov-west-1
      server_side_encryption: AES256
      initial_version: conmon-scan/((image-repository)).xml

  - name: audit-html-file
    type: s3-iam
    source:
      bucket: ((container_scans_bucket))
      versioned_file: audit/((image-repository))-audit.html
      region_name: us-gov-west-1
      server_side_encryption: AES256
      initial_version: audit/((image-repository))-audit.html

  - name: audit-xml-file
    type: s3-iam
    source:
      bucket: ((container_scans_bucket))
      versioned_file: audit/((image-repository))-audit.xml
      region_name: us-gov-west-1
      server_side_encryption: AES256
      initial_version: audit/((image-repository))-audit.xml

resource_types:
  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: pull-request
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: github-pr-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: s3-iam
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: s3-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: cron-resource
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: cron-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: time
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: time-resource
      aws_region: us-gov-west-1
      tag: latest
